<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="c:\program files (x86)\microsoft visual studio 14.0\team tools\static analysis tools\fxcop\Xml\CodeAnalysisReport.xsl"?>
<FxCopReport Version="14.0">
 <Namespaces>
  <Namespace Name="Calc_Forms">
   <Messages>
    <Message Id="Calc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Calc' in namespace name 'Calc_Forms'.</Issue>
    </Message>
    <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="Breaking">
     <Issue Name="Namespace" Certainty="95" Level="Error">Remove the underscores from namespace name 'Calc_Forms'.</Issue>
    </Message>
   </Messages>
  </Namespace>
 </Namespaces>
 <Targets>
  <Target Name="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests\bin\Debug\Calc+tests.exe">
   <Modules>
    <Module Name="calc+tests.exe">
     <Messages>
      <Message TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="NonBreaking">
       <Issue Name="NoStrongName" Certainty="95" Level="CriticalError">Sign 'Calc+tests.exe' with a strong name key.</Issue>
      </Message>
      <Message Id="tests" TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="85" Level="Error">Correct the casing of 'tests' in assembly name 'Calc+tests.exe' by changing it to 'Tests'.</Issue>
      </Message>
      <Message Id="Calc" TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="Breaking">
       <Issue Name="Assembly" Certainty="75" Level="CriticalWarning">Correct the spelling of 'Calc' in assembly name 'Calc+tests.exe'.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Error">Mark 'Calc+tests.exe' with CLSCompliant(true) because it exposes externally visible types.</Issue>
      </Message>
      <Message TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="NonBreaking">
       <Issue Certainty="95" Level="Warning">Because assembly 'Calc+tests.exe' contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Issue>
      </Message>
     </Messages>
     <Namespaces>
      <Namespace Name="Calc_Forms">
       <Types>
        <Type Name="Form1" Kind="Class" Accessibility="Public" ExternallyVisible="True">
         <Members>
          <Member Name="#bPerc_Click(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.ToolTip.Show(System.String,System.Windows.Forms.IWin32Window,System.Int32)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="263">Method 'Form1.bPerc_Click(object, EventArgs)' passes a literal string as parameter 'text' of a call to 'ToolTip.Show(string, IWin32Window, int)'. Retrieve the following string(s) from a resource table instead: "Процент от чего?".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="260">Modify 'Form1.bPerc_Click(object, EventArgs)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Процент" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="263">Correct the spelling of the unrecognized token 'Процент' in the literal '"Процент от чего?"'.</Issue>
            </Message>
            <Message Id="от" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="263">Correct the spelling of the unrecognized token 'от' in the literal '"Процент от чего?"'.</Issue>
            </Message>
            <Message Id="чего" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="263">Correct the spelling of the unrecognized token 'чего' in the literal '"Процент от чего?"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#bSqrt_Click(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.ToolTip.Show(System.String,System.Windows.Forms.IWin32Window,System.Int32)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="228">Method 'Form1.bSqrt_Click(object, EventArgs)' passes a literal string as parameter 'text' of a call to 'ToolTip.Show(string, IWin32Window, int)'. Retrieve the following string(s) from a resource table instead: "Корень из отрицательного числа".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="225">Modify 'Form1.bSqrt_Click(object, EventArgs)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message Id="Корень" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="228">Correct the spelling of the unrecognized token 'Корень' in the literal '"Корень из отрицательного числа"'.</Issue>
            </Message>
            <Message Id="из" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="228">Correct the spelling of the unrecognized token 'из' in the literal '"Корень из отрицательного числа"'.</Issue>
            </Message>
            <Message Id="отрицательного" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="228">Correct the spelling of the unrecognized token 'отрицательного' in the literal '"Корень из отрицательного числа"'.</Issue>
            </Message>
            <Message Id="числа" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="228">Correct the spelling of the unrecognized token 'числа' in the literal '"Корень из отрицательного числа"'.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#Digital_Click(System.Object,System.EventArgs)" Kind="Method" Static="False" Accessibility="Public" ExternallyVisible="True">
           <Messages>
            <Message Id="System.Windows.Forms.ToolTip.Show(System.String,System.Windows.Forms.IWin32Window,System.Int32)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="107">Method 'Form1.Digital_Click(object, EventArgs)' passes a literal string as parameter 'text' of a call to 'ToolTip.Show(string, IWin32Window, int)'. Retrieve the following string(s) from a resource table instead: "Число слишком длинное".</Issue>
            </Message>
            <Message TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="NonBreaking">
             <Issue Certainty="95" Level="CriticalError" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="104">Modify 'Form1.Digital_Click(object, EventArgs)' to catch a more specific exception than 'Exception' or rethrow the exception.</Issue>
            </Message>
            <Message TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="Breaking">
             <Issue Name="Member" Certainty="95" Level="Error" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="93">Remove the underscores from member name 'Form1.Digital_Click(object, EventArgs)'.</Issue>
            </Message>
            <Message Id="Число" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="107">Correct the spelling of the unrecognized token 'Число' in the literal '"Число слишком длинное"'.</Issue>
            </Message>
            <Message Id="длинное" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="107">Correct the spelling of the unrecognized token 'длинное' in the literal '"Число слишком длинное"'.</Issue>
            </Message>
            <Message Id="слишком" TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="107">Correct the spelling of the unrecognized token 'слишком' in the literal '"Число слишком длинное"'.</Issue>
            </Message>
            <Message Id="0" TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="100">In externally visible method 'Form1.Digital_Click(object, EventArgs)', validate parameter 'sender' before using it.</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#InitializeComponent()" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="264">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "%".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="253">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "*".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="298">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "+".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="275">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "-".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="94">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: ".".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="231">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "/".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="105">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "0".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="204">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "1".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="286">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "1/x".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="193">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "2".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="182">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "3".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="171">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "4".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="160">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "5".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="149">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "6".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="138">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "7".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="127">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "8".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="116">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "9".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="242">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "=".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="341">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "C".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="404">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "Form1".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="320">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "±".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="352">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "₠".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="363">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "←".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.Designer.cs" Line="309">Method 'Form1.InitializeComponent()' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: "√".</Issue>
            </Message>
           </Messages>
          </Member>
          <Member Name="#TextAdd(System.String,System.Char)" Kind="Method" Static="False" Accessibility="Private" ExternallyVisible="False">
           <Messages>
            <Message Id="System.Windows.Forms.Control.set_Text(System.String)" TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303" Status="Active" Created="2016-02-13 13:18:51Z" FixCategory="DependsOnFix">
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="49">Method 'Form1.TextAdd(string, char)' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: " ".</Issue>
             <Issue Name="KnownValue" Certainty="75" Level="Warning" Path="C:\Source\git\csharp_exercises\C sharp\Calc+tests\Calc+tests" File="Form1.cs" Line="55">Method 'Form1.TextAdd(string, char)' passes a literal string as parameter 'value' of a call to 'Control.Text.set(string)'. Retrieve the following string(s) from a resource table instead: " ".</Issue>
            </Message>
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
      <Namespace Name="Calc_Forms.Properties">
       <Types>
        <Type Name="Resources" Kind="Class" Accessibility="Assembly" ExternallyVisible="False">
         <Members>
          <Member Name="#.ctor()" Kind="Method" Static="False" Accessibility="Assembly" ExternallyVisible="False">
           <Messages>
            <Message TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811" Status="ExcludedInSource" Created="2016-02-13 13:18:51Z" FixCategory="NonBreaking" LastSeen="0001-01-01 00:00:00Z" />
           </Messages>
          </Member>
         </Members>
        </Type>
       </Types>
      </Namespace>
     </Namespaces>
    </Module>
   </Modules>
  </Target>
 </Targets>
 <Rules>
  <Rule TypeName="AssembliesShouldHaveValidStrongNames" Category="Microsoft.Design" CheckId="CA2210">
   <Name>Assemblies should have valid strong names</Name>
   <Description>Either the assembly has no strong name, an invalid one, or the strong name is valid only because of the computer configuration. The assembly should not be deployed in this state. The most common causes of this are: 1) The assembly's contents were modified after it was signed. 2) The signing process failed. 3) The assembly was delay-signed. 4) A registry key existed that allowed the check to pass (where it would not have otherwise).</Description>
   <Resolution Name="NoStrongName">Sign {0} with a strong name key.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182127.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="AvoidUncalledPrivateCode" Category="Microsoft.Performance" CheckId="CA1811">
   <Name>Avoid uncalled private code</Name>
   <Description>There is uncalled code that is not externally visible and is not a known runtime entry point. If this violation fires in error, please send a problem report to the Visual Studio Code Analysis team.</Description>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182264.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Do not pass literals as localized parameters" Category="Microsoft.Globalization" CheckId="CA1303">
   <Name>Do not pass literals as localized parameters</Name>
   <Description>Literal strings that are embedded in source code are difficult to localize. Avoid passing literal strings as arguments in circumstances where a localized string is generally expected.</Description>
   <Resolution Name="KnownValue">Method {0} passes a literal string as parameter '{1}' of a call to {2}. Retrieve the following string(s) from a resource table instead: {3}.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182187.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="DoNotCatchGeneralExceptionTypes" Category="Microsoft.Design" CheckId="CA1031">
   <Name>Do not catch general exception types</Name>
   <Description>You should not catch Exception or SystemException. Catching generic exception types can hide run-time problems from the library user, and can complicate debugging. You should catch only those exceptions that you can handle gracefully.</Description>
   <Resolution Name="Default">Modify {0} to catch a more specific exception than {1} or rethrow the exception.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182137.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">CriticalError</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeCasedCorrectly" Category="Microsoft.Naming" CheckId="CA1709">
   <Name>Identifiers should be cased correctly</Name>
   <Description>Type, namespace, and member identifiers are Pascal-cased. Parameter identifiers are camel-cased. Two letter acronyms within these identifiers should be upper-cased, for example, use System.IO instead of System.Io. Acronyms of three or more letters should be Pascal-cased, for example, use System.Xml instead of System.XML. The pascal-casing convention capitalizes the first letter of each word, as in BackColor. The camel-casing convention formats the first letter of the first word in lowercase and capitalizes the first letter of all subsequent words, as in backgroundColor. Although it may be common practice for some two letter acronyms to not be fully capitalized, violations of this rule should not be excluded for this reason. For example, 'DbConnection', is common but incorrect; use DBConnection. A violation of this rule might be required for compatibility with existing, non-managed symbol schemes. In general, however, these symbols should not be visible outside the assembly that uses them.</Description>
   <Resolution Name="Assembly">Correct the casing of '{0}' in assembly name {1} by changing it to '{2}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182240.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="85">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldBeSpelledCorrectly" Category="Microsoft.Naming" CheckId="CA1704">
   <Name>Identifiers should be spelled correctly</Name>
   <Description>The individual words that make up an identifier should not be abbreviated and should be spelled correctly. If this rule generates a false positive on a term that should be recognized, add the word to the FxCop custom dictionary.</Description>
   <Resolution Name="Assembly">Correct the spelling of '{0}' in assembly name {1}.</Resolution>
   <Resolution Name="Namespace">Correct the spelling of '{0}' in namespace name '{1}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb264492.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="75">CriticalWarning</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="IdentifiersShouldNotContainUnderscores" Category="Microsoft.Naming" CheckId="CA1707">
   <Name>Identifiers should not contain underscores</Name>
   <Description>Do not use underscores when specifying identifiers. Some generated Visual Studio identifiers for applications contain underscore characters. Underscore characters should generally be avoided in public identifiers.</Description>
   <Resolution Name="Member">Remove the underscores from member name {0}.</Resolution>
   <Resolution Name="Namespace">Remove the underscores from namespace name '{0}'.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182245.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="namingrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Literals should be spelled correctly" Category="Microsoft.Naming" CheckId="CA2204">
   <Name>Literals should be spelled correctly</Name>
   <Description>This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token.</Description>
   <Resolution Name="Default">Correct the spelling of the unrecognized token '{0}' in the literal '{1}'.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/bb264488.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithClsCompliant" Category="Microsoft.Design" CheckId="CA1014">
   <Name>Mark assemblies with CLSCompliantAttribute</Name>
   <Description>Assemblies should explicitly state their CLS compliance using the CLSCompliant attribute. An assembly without this attribute is not CLS-compliant. Assemblies, modules, and types can be CLS-compliant even if some parts of the assembly, module, or type are not CLS-compliant. The following rules apply: 1) If the element is marked CLSCompliant, any noncompliant members must have the CLSCompliant attribute present with its argument set to false. 2) A comparable CLS-compliant alternative member must be supplied for each member that is not CLS-compliant.</Description>
   <Resolution Name="Default">Mark {0} with CLSCompliant(true) because it exposes externally visible types.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/ms182156.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Error</MessageLevel>
   <File Name="designrules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="MarkAssembliesWithNeutralResourcesLanguage" Category="Microsoft.Performance" CheckId="CA1824">
   <Name>Mark assemblies with NeutralResourcesLanguageAttribute</Name>
   <Description>The NeutralResourcesLanguage attribute informs the ResourceManager of the language used to render the neutral culture's resources for an assembly. When looking up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources located in the main assembly, instead of searching for a satellite assembly with the current user interface culture for the current thread. This will improve lookup performance for the first resource you load and can reduce your working set.</Description>
   <Resolution Name="Default">Because assembly {0} contains a ResX-based resource file, mark it with the NeutralResourcesLanguage attribute, specifying the language of the resources within the assembly. This could improve lookup performance the first time a resource is retrieved.</Resolution>
   <Owner />
   <Url>http://msdn.microsoft.com/library/bb385967.aspx</Url>
   <Email>[none]</Email>
   <MessageLevel Certainty="95">Warning</MessageLevel>
   <File Name="performancerules.dll" Version="14.0.0.0" />
  </Rule>
  <Rule TypeName="Validate arguments of public methods" Category="Microsoft.Design" CheckId="CA1062">
   <Name>Validate arguments of public methods</Name>
   <Description>All reference arguments passed to externally visible methods should be checked against null (Nothing in VB). If appropriate, throw a System.ArgumentNullException when the argument is null.</Description>
   <Resolution Name="Default">In externally visible method {0}, validate parameter '{1}' before using it.</Resolution>
   <Owner>RuleOwner</Owner>
   <Url>http://msdn.microsoft.com/library/ms182182.aspx</Url>
   <Email />
   <MessageLevel Certainty="75">Warning</MessageLevel>
   <File Name="dataflowrules.dll" Version="14.0.0.0" />
  </Rule>
 </Rules>
 <Localized>
  <String Key="Category">Category</String>
  <String Key="Certainty">Certainty</String>
  <String Key="CollapseAll">Collapse All</String>
  <String Key="CheckId">Check Id</String>
  <String Key="Error">Error</String>
  <String Key="Errors">error(s)</String>
  <String Key="ExpandAll">Expand All</String>
  <String Key="Help">Help</String>
  <String Key="Line">Line</String>
  <String Key="Messages">message(s)</String>
  <String Key="LocationNotStoredInPdb">[Location not stored in Pdb]</String>
  <String Key="Project">Project</String>
  <String Key="Resolution">Resolution</String>
  <String Key="Rule">Rule</String>
  <String Key="RuleFile">Rule File</String>
  <String Key="RuleDescription">Rule Description</String>
  <String Key="Source">Source</String>
  <String Key="Status">Status</String>
  <String Key="Target">Target</String>
  <String Key="Warning">Warning</String>
  <String Key="Warnings">warning(s)</String>
  <String Key="ReportTitle">Code Analysis Report</String>
 </Localized>
</FxCopReport>
